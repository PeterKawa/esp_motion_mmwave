# Replace all "esp8266-template ..." entries with your sensor name
#
esphome:
  name: "esp8266-template"
  includes:
    - uart_read_line_sensor_ld2410v3.h
  on_boot:
    priority: -100
    then:
      - script.execute: get_config
esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "generated_key_here"

ota:
  password: !secret ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-xxxxxxx"
    password: "abcde12345"

web_server:
  port: 80
  version: 2
  include_internal: true
  ota: false

captive_portal:

uart:
 id: uart_bus
 tx_pin:
   number: TX
 rx_pin:
   number: RX
 baud_rate: 256000
 parity: NONE
 stop_bits: 1

switch:
  - platform: safe_mode
    name: "esp8266-template Use safemode"

  - platform: template
    name: "esp8266-template Config mode"
    id: configmode
    optimistic: true
    # assumed_state: false
    turn_on_action:
      # - switch.turn_off: engineering_mode
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(true);'
      - delay: 100ms
      - script.execute: clear_targets
    turn_off_action:
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(false);'

  - platform: template
    name: "esp8266-template Show Target stats"
    id: show_stats
    optimistic: true
    internal: true
    turn_off_action:
      - script.execute: clear_targets

text_sensor:
  - platform: template
    name: "esp8266-template Uptime human"
    id: uptime_human_readable
    icon: mdi:clock-start
    update_interval: 60s

sensor:
  - platform: uptime
    name: "esp8266-template Uptime"
    id: uptime_sensor
    update_interval: 60s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human_readable
            state: !lambda |-
                      int seconds = round(id(uptime_sensor).raw_state);
                      int days = seconds / (24 * 3600);
                      seconds = seconds % (24 * 3600);
                      int hours = seconds / 3600;
                      seconds = seconds % 3600;
                      int minutes = seconds /  60;
                      seconds = seconds % 60;
                      return (
                        (days ? to_string(days)+":" : "00:") +
                        (hours ? to_string(hours)+":" : "00:") +
                        (minutes ? to_string(minutes)+":" : "00:") +
                        (to_string(seconds))
                      ).c_str();

  - platform: custom # currently crashes ESP32
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      //return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
      return {};
    sensors:

  - platform: template
    name: movingTargetDistance
    id: movingTargetDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true

  - platform: template
    name: movingTargetEnergy
    id: movingTargetEnergy
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true

  - platform: template
    name: stillTargetDistance
    id: stillTargetDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true

  - platform: template
    name: stillTargetEnergy
    id: stillTargetEnergy
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true

  - platform: template
    name: detectDistance
    id: detectDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true

  - platform: dht
    pin: GPIO4
    # pedw: ESP8266 SDA (GPIO4 / D2) (send/receive data)
    temperature:
      name: "esp8266-template Temperature"
      filters:
        - offset: -1.0
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
    humidity:
      name: "esp8266-template Humidity"
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 10
    update_interval: 60s
    model: DHT11

### NOTE >>>>>>>> Only GPIO17 is analog-capable on ESP8266.
###      BUT GPIO17 lacks on the D1mini Wemos board <<<<<<<<<
###  - platform: adc
###    pin: GPIO3
###    name: "esp8266-template Lux"
###    update_interval: '60s'
###    unit_of_measurement: lux
###    filters:
###      - lambda: |-
###          return ((x / 10000.0) * -20000000.0) + 1635;

custom_component:
  - lambda: |-
      return {new LD2410(id(uart_bus))};
    components:
      - id: ld2410

binary_sensor:
  - platform: gpio
    name: "esp8266-template Detectie"
    id: mmwave_presence_ld2410B
    pin: GPIO13 # =D7
    device_class: motion
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_off: mmwave_presence_ld2410B
            then:
              - delay: 150ms
              - script.execute: clear_targets

number:
  - platform: template
    name: "esp8266-template Max distance"
    id: maxconfigDistance
    unit_of_measurement: "m"
    min_value: 0.75
    max_value: 6
    step: 0.75
    #mode: box #default: slider
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(x/0.75,x/0.75,id(noneDuration).state);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode

  - platform: template
    name: "esp8266-template Sensitivity T.hold"
    id: allSensitivity
    unit_of_measurement: "%"
    min_value: 10
    max_value: 100
    step: 2 #5
    #mode: box # default: slider
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setAllSensitivity(x);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode

  - platform: template
    name: "esp8266-template Motion hold"
    id: noneDuration
    min_value: 0
    # max_value: 32767
    max_value: 200
    unit_of_measurement: "s"
    step: 2
    #mode: box
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(id(maxconfigDistance).state, id(maxconfigDistance).state, x);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode

button:
  - platform: restart
    name: "esp8266-template Restart ESP"
    entity_category: diagnostic
    on_press:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->factoryReset();'
      - delay: 150ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->reboot();'
      - delay: 150ms

script:
  - id: get_config
    then:
      - switch.turn_on: configmode
      - delay: 500ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 500ms
      - switch.turn_off: configmode

  - id: clear_targets
    then:
      - lambda: |-
          //id(hasTarget).publish_state(0);
          //id(hasMovingTarget).publish_state(0);
          //id(hasStillTarget).publish_state(0);
          id(movingTargetDistance).publish_state(0);
          id(movingTargetEnergy).publish_state(0);
          id(stillTargetDistance).publish_state(0);
          id(stillTargetEnergy).publish_state(0);
          id(detectDistance).publish_state(0);
